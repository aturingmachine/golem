(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{413:function(e,t,a){"use strict";a.r(t);var s=a(55),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"play"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#play"}},[e._v("#")]),e._v(" play "),a("badge",{attrs:{text:"Music*",type:"music-badge optional-mod-badge tooltip-root"}}),e._v(" "),a("badge",{attrs:{text:"Youtube*",type:"youtube-badge optional-mod-badge tooltip-root"}})],1),e._v(" "),a("p",[e._v("Play a Local Track retrieved via searching for the provided query, a YouTube track retrievied via YouTube search if the Local Track search misses; A YouTube Track from a provided absolute url; A YouTube playlist from a provided absolute YouTube Playlist URL.")]),e._v(" "),a("h2",{attrs:{id:"examples"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[e._v("#")]),e._v(" Examples")]),e._v(" "),a("h3",{attrs:{id:"legacy-command"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#legacy-command"}},[e._v("#")]),e._v(" Legacy Command")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$go play twice tt\n$go play <youtube url>\n$go play <youtube playlist url>\n")])])]),a("h3",{attrs:{id:"slash-command"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#slash-command"}},[e._v("#")]),e._v(" Slash Command")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("/goplay twice tt\n/goplay <youtube url>\n/goplay <youtube playlist url>\n")])])]),a("h2",{attrs:{id:"arguments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arguments"}},[e._v("#")]),e._v(" Arguments")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("query")]),e._v("* - "),a("code",[e._v("string")]),e._v(": If a string is provided the argument is interpreted as a search query. First searching the Local Libraries, if no Local Track is found the query is then run against YouTube - taking the first result as the track to play. If a Youtube link is provided it will be played - if the link is a playlist it will have the first 20 tracks shuffled and queued. This number can be modified using the extended argument "),a("code",[e._v("limit=20")]),e._v(".")])]),e._v(" "),a("h2",{attrs:{id:"extended-arguments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#extended-arguments"}},[e._v("#")]),e._v(" Extended Arguments")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("limit")]),e._v(" "),a("ul",[a("li",[e._v("Type: "),a("code",[e._v("number")])]),e._v(" "),a("li",[e._v("Requires a YouTube playlist - Override the default fetch limit of 20")])])]),e._v(" "),a("li",[a("strong",[e._v("shuffle")]),e._v(" "),a("ul",[a("li",[e._v("Type: "),a("code",[e._v("boolean")])]),e._v(" "),a("li",[e._v("Requires a YouTube playlist - Shuffle the tracks pulled from the YouTube playlist")])])])])])}),[],!1,null,null,null);t.default=r.exports}}]);